#!/usr/bin/python3
#+
# Demonstration of behaviour of pattern-to-context matrix.
#
# When a source Pattern is set on a Context, an additional copy of
# the Context matrix is saved by Cairo, so subsequent adjustments
# of the Context matrix will not affect the placement of the Pattern.
# This pattern-to-context matrix is recomputed every time cairo_set_source
# is called, even if the new Pattern is the same as the old one.
#
# This example fills four squares, in two rows of two each, with the same
# pattern. The two squares in the top row share the same pattern-to-context
# matrix, while this is reset for each of the squares in the bottom row.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    deg, \
    Matrix, \
    Rect, \
    Vector

diag_size = Vector(200, 200)
margin = Vector(20, 20)

pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = Vector(2, 2) * (diag_size + margin) + margin,
  )
g = \
    (qah.Context.create(pix)
        .set_source_colour(Colour.grey(1))
        .paint()
        .set_source_colour(Colour.grey(0))
    )
pat = \
    (g
        .push_group()
        .transform(Matrix.rotate(-30 * deg, diag_size / 2))
        .rectangle(Rect(10, 10, 300, 100))
        .rectangle(Rect(10, 120, 300, 100))
        .rectangle(Rect(10, 230, 300, 100))
        .rectangle(Rect(10, 340, 300, 100))
        .fill()
        .pop_group()
    )
for row in (0, 1) :
    g.source = pat
    for col in (0, 1) :
        (g
            .save()
            .translate(Vector(col, row) * (diag_size + margin) + margin)
        )
        if row == 1 :
            g.source = g.source # resync pattern-to-context matrix to context matrix
        #end if
        (g
            .rectangle(Rect.from_dimensions(diag_size))
            .fill()
            .restore()
        )
    #end for
#end for

pix.flush().write_to_png("%s.png" % os.path.basename(sys.argv[0]))
