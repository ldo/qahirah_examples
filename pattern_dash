#!/usr/bin/python3
#+
# Qahirah example--Use an arbitrary pattern like a line dash.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Path, \
    Vector
Pt = Path.Point

line_width = 40
image_dimensions = Vector(300, 300)
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = image_dimensions + Vector(1, 1) * line_width
  )
pattern_length = 64 * 18.2 / 18
  # adjusted to try to get whole number of repeats of pattern along length of curve
pattern = \
    qah.Pattern.create_linear \
      (
        p0 = (0, 0),
        p1 = (pattern_length, 0), # base orientation is parallel to X-axis
        colour_stops =
            (
                (0, Colour.from_hsva((0.475, 0.9, 0.8))),
                (1, Colour.from_hsva((0.975, 0.9, 0.8))),
            )
      ).set_extend(CAIRO.EXTEND_REPEAT)
figure = Path \
  (
    [
        Path.Segment
          (
            points =
                [
                    Pt((0, 0.5), False),
                    Pt((0, 0), True),
                    Pt((0.25, 0), True),
                    Pt((0.5, 0.5), False),
                    Pt((0.75, 1), True),
                    Pt((1, 1), True),
                    Pt((1, 0.5), False),
                    Pt((1, 0), True),
                    Pt((0.75, 0), True),
                    Pt((0.5, 0.5), False),
                    Pt((0.25, 1), True),
                    Pt((0, 1), True),
                    #Pt((0, 0.5), False), # no need to repeat first point now
                ],
            closed = True
          ),
    ]
  ).transform(Matrix.scale(image_dimensions))
ctx = \
    (qah.Context.create(pix)
        .translate(Vector(1, 1) * line_width / 2)
        .set_source_colour(Colour.grey(1))
        .paint()
    )
ctx_matrix = ctx.matrix
overlap_factor = 0.01 # fudge to avoid gaps
for seg in figure.flatten(tolerance = 0.01).segments :
    if len(seg.points) != 0 :
        nr_points = len(seg.points)
        pattern_offset = 0
          # adjustment so successive sections of pattern join up continuously
        for i in range(not seg.closed, nr_points) :
            p0 = seg.points[(i - 1) % nr_points].pt
            p1 = seg.points[i].pt
            p2 = seg.points[(i + 1) % nr_points].pt
            p3 = seg.points[(i + 2) % nr_points].pt
            if p1 != p2 :
                # Need to watch out for duplicated points.
                delta = p2 - p1
                orient = delta.angle()
                step = abs(delta)
                # Slant starting and ending edges of segment to nicely abut adjacent
                # segments.
                # Note how the following angles are normalized to [-180°, +180°]
                # instead of [0, 360°] to avoid discontinuities around 0°.
                if p0 != p1 :
                    preslant = (p1 - p0).angle()
                else :
                    preslant = orient
                #end if
                preslant = ((preslant - orient + qah.circle / 2) % qah.circle - qah.circle / 2) / 2
                if p2 != p3 :
                    postslant = (p3 - p2).angle()
                else :
                    postslant = orient
                #end if
                postslant = ((postslant - orient + qah.circle / 2) % qah.circle - qah.circle / 2) / 2
                #sys.stderr.write("{} → {} → {} -> {} orient = {:.3g} → {:.3g}° → {:3g}°, preslant = {:.3g}°, postslant= {:.3g}° pattern_offset {:.3g}\n".format(p0, p1, p2, p3, (p1 - p0).angle() / qah.deg, orient / qah.deg, (p3 - p2).angle() / qah.deg, preslant / qah.deg, postslant / qah.deg, pattern_offset)) # debug
                ctx.matrix = \
                    (
                        ctx_matrix
                    *
                        Matrix.translate(p1)
                    *
                        Matrix.rotate(orient)
                    *
                        Matrix.translate(- Vector(1, 1) * pattern_offset)
                    )
                ctx.source = pattern
                start_centre = Vector(- pattern_length * overlap_factor, 0)
                end_centre = Vector(step + pattern_length * overlap_factor, 0)
                start_side = Vector(0, line_width / 2).rotate(preslant)
                end_side = Vector(0, line_width / 2).rotate(postslant)
                ctx.append_path \
                  (
                    Path
                      (
                        [
                            Path.Segment
                              (
                                points =
                                    [
                                        Pt(start_centre - start_side, False),
                                        Pt(end_centre - end_side, False),
                                        Pt(end_centre + end_side, False),
                                        Pt(start_centre + start_side, False),
                                    ],
                                closed = True
                              )
                        ]
                      )
                        .transform(Matrix.translate(Vector(1, 1) * pattern_offset))
                  )
                ctx.fill()
                pattern_offset = (pattern_offset + step) % pattern_length
            #end if
        #end for
    #end if
#end for
#ctx.identity_matrix().set_line_width(5).append_path(figure).stroke() # debug -- for comparison

pix.flush().write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
