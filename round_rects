#!/usr/bin/python3
#+
# Example use of Qahirah: how to draw rounded-corner rectangles.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# This script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Rect, \
    Vector

#+
# Miscellaneous useful stuff
#-

def round_rect(g, bounds, radii) :
    "appends a rounded-corner rectangle to the current path in the Context g." \
    " bounds is a Rect defining the bounds of the rectangle, and radii is a Vector" \
    " defining the horizontal and vertical corner radii."
    g.new_sub_path() # so first line_to is actually a move_to
    corner1 = bounds.topleft
    for side in range(4) :
        angle = side / 4 * qah.circle
        step = Vector(1, 0).rotate(angle)
        corner2 = corner1 + step * bounds.dimensions
        g.line_to(corner1 + step * radii)
        g.rel_line_to(step * (bounds.dimensions - 2 * radii))
        for elt in \
            (qah.Path.create_arc
              (
                centre = (0, 0),
                radius = 1,
                angle1 = angle - 90 * qah.deg,
                angle2 = angle,
                negative = False
              )
                .transform
                  (
                        Matrix.translate
                          (
                                corner2
                            +
                                Vector(1, 1).rotate(angle + 90 * qah.deg) * radii
                          )
                    *
                        Matrix.scale(radii)
                  )
                .to_elements()
            ) \
        :
            if elt.type != CAIRO.PATH_MOVE_TO :
                elt.draw(g)
            #end if
        #end for
        corner1 = corner2
    #end for
    g.close_path()
#end round_rect

#+
# Mainline
#-

pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = (512, 512)
  )
g = \
    (qah.Context.create(pix)
        .set_source_colour(Colour.grey(1, 1))
        .paint()
        .set_line_width(8)
    )
for \
    transform, colour \
in \
    (
        (
            Matrix.translate(Vector(224, 160)) * Matrix.rotate(90 * qah.deg),
            Colour.from_hsva((0.12, 0.8, 0.8)))
        ,
        (
            Matrix.translate(Vector(288, 32)) * Matrix.rotate(45 * qah.deg),
            Colour.from_hsva((0.5, 0.5, 0.5)))
        ,
        (
            Matrix.translate(Vector(0, 288)) * Matrix.skew(Vector(-1, 0), Vector(0, 200)),
            Colour.from_hsva((0, 0.4, 0.8)))
        ,
        (Matrix.identity, Colour.grey(0, 1)),
    ) \
:
    g.save()
    g.transform(transform)
    for \
        bounds, radii \
    in \
        (
            (Rect(10, 10, 100, 200), Vector(40, 10)),
            (Rect(120, 10, 100, 200), Vector(20, 20)),
            (Rect(230, 10, 100, 200), Vector(10, 40)),
        ) \
    :
        round_rect(g, bounds, radii)
        g.source_colour = colour.replace_rgba(a = 0.5)
        g.fill_preserve()
        g.source_colour = colour
        g.stroke()
    #end for
    g.restore()
#end for
pix.write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
