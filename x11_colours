#!/usr/bin/python3
#+
# Example use of Qahirah: show a quick-and-dirty plot of swatches for all X11 colours.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# This script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Vector

def better_name(name1, name2) :
    "is name1 to be preferred over name2 for a colour name."
    # Some colours have two names: one all lowercase with spaces between words,
    # the other camelcase without spaces. However, there are also some additional
    # related colours with numeric suffixes; the base names are camelcase without spaces.
    # Anyway, I prefer the lowercase-with-spaces forms where available, for now.
    return \
        (name1.find(" ") > -1) > (name2.find(" ") > -1)
#end better_name

scale = 4
image_radius = 512
extra_height = 512
spot_radius = 6
height_fudge = 0.25
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_ARGB32,
    dimensions = (Vector(2, 2) * (image_radius + spot_radius) + Vector(0, 1) * extra_height) * scale
  )
g = \
    (qah.Context.create(pix)
        .set_source_colour(Colour.grey(0, 0))
        .paint()
        .set_matrix
          (
                Matrix.scale(scale)
            *
                Matrix.translate
                  (
                        Vector(1, 1) * (image_radius + spot_radius)
                    +
                        Vector(0, 1 + height_fudge) * extra_height
                  )
          )
        .select_font_face("sans-serif", CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_BOLD)
        .set_font_size(4)
    )
label_colour = Colour.grey(0, 1)
spot = qah.Path.create_arc \
  (
    centre = (0, 0),
    radius = spot_radius,
    angle1 = 0,
    angle2 = qah.circle,
    negative = False
  )
colour_names = {} # mapping from Colour to name
for name in Colour.x11 :
    colour = tuple(Colour.x11[name])
    if colour not in colour_names or better_name(name, colour_names[colour]) :
        colour_names[colour] = name
    #end if
#end for
# sys.stderr.write("colour_names[{}] = {!r}\n".format(len(colour_names), colour_names)) # debug
for colour in colour_names :
    name = colour_names[colour]
    colour = Colour(*colour)
    hue, saturation, value = colour.to_hsva()[:3]
    angle = (hue - 0.25) * qah.circle # 0 = red = straight up
    spot_pos = \
        (
            qah.Vector.from_polar(saturation * image_radius, angle)
        +
            qah.Vector(0, - value) * extra_height
        )
    spot.draw(g, Matrix.translate(spot_pos))
    g.set_source_colour(colour).fill()
    (g
        .move_to(Vector(- g.text_extents(name).width / 2, (g.font_extents.ascent - g.font_extents.descent) / 2) + spot_pos)
        .set_source_colour(label_colour)
        .show_text(name)
    )
#end for
pix.write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
