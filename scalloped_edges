#!/usr/bin/python3
#+
# Generation of outlines suitable for “stamps” on DeviantArt.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Path, \
    Vector

resolution = 300
scallop_size = 5 # size of each scallop
scallop_steps = Vector(15, 8)
  # number of scallops along horizontal and vertical edges. This choice of numbers
  # produces proportions that should nicely scale down to 99×56 pixels.
line_thickness = 0.5
default_params = \
    {
        "depth" : 1, # the relative depth of the scallop
        "fraction" : 0.8,
          # relative width between the scallop base corners within the scallop step size
        "margin" : 0.45,
          # gap, relative to scallop size, between corners and scallops closest to them
        "sharpness" : 2 / 3, # controls the sharpness of the scallop tip
    }
instance_params = \
    ( # just some example parameters to try. Feel free to experiment with others.
        {"depth" : 0.4, "fraction" : 0.7},
        {"depth" : 0.2, "fraction" : 0.9},
        {"depth" : 0.2, "fraction" : 0.7},
        {"depth" : 0.3, "fraction" : 0.25},
        {"depth" : 0.5, "fraction" : 0.2},
        {"depth" : 0.3, "fraction" : 0.4},
        {"depth" : 0.1, "fraction" : 0.2},
        {"depth" : 0.1, "fraction" : 0.5},
        {"depth" : 0.1, "fraction" : 1.0},
    )

#+
# Mainline
#-

nr_cols = math.ceil(math.sqrt(len(instance_params)))
nr_rows = math.ceil(len(instance_params) / nr_cols)
margin = Vector(10, 10)
bg_colour = Colour.grey(1, 1)
fg_colour = Colour.grey(0, 1)

figure_dimensions = scallop_steps * scallop_size
image = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_ARGB32,
    dimensions = round((Vector(nr_cols, nr_rows) * (figure_dimensions + margin) + margin) * resolution / qah.base_dpi)
  )
draw = \
    (qah.Context.create(image)
        .set_source_colour(Colour.grey(0, 0))
        .paint()
    )
row = 0
col = 0
for params in instance_params :
    params = dict(default_params, **params)
    draw.matrix = \
        (
            Matrix.scale(resolution / qah.base_dpi)
        *
            Matrix.translate(Vector(col, row) * (figure_dimensions + margin) + margin)
        )
    (draw
        .new_path()
        .move_to((0, 0))
    )
    corner = Matrix.identity
    for \
        step, nr_steps \
    in \
        (
            (Vector(1, 0), scallop_steps.x),
            (Vector(0, 1), scallop_steps.y),
            (Vector(-1, 0), scallop_steps.x),
            (Vector(0, -1), scallop_steps.y),
        ) \
    :
        step_normal = step.rotate(qah.circle / 4)
        scallop = Path \
          (
            [
                Path.Segment
                  (
                    points =
                        (
                            Path.Point((0, 0), False),
                            Path.Point
                              (
                                pt = Vector(1, 1) * (1 - params["fraction"]) / 2 * step,
                                off = False
                              ),
                            Path.Point
                              (
                                pt =
                                        Vector(1, 1) * step * params["sharpness"] / 2
                                    +
                                        Vector(1, 1) * 2 * params["depth"] * step_normal,
                                off = True,
                              ),
                            Path.Point
                              (
                                pt =
                                        Vector(1, 1) * step * (1 - params["sharpness"] / 2)
                                    +
                                        Vector(1, 1) * 2 * params["depth"] * step_normal,
                                off = True,
                              ),
                            Path.Point
                              (
                                pt = Vector(1, 1) * (1 - (1 - params["fraction"]) / 2) * step,
                                off = False
                              ),
                            Path.Point
                              (
                                pt = Vector(1, 1) * step,
                                off = False
                              )
                        ),
                    closed = False
                  )
            ]
          ).transform(Matrix.scale(scallop_size))
        scallop = tuple(scallop.to_elements())[1:] # ignore initial MoveTo
        draw.rel_line_to(step * scallop_size * params["margin"])
        locate = corner * Matrix.translate(step * scallop_size * (params["margin"] - 1.0))
        for i in range(nr_steps) :
            locate *= Matrix.translate(step * scallop_size)
            for elt in scallop :
                elt.draw(draw, locate)
            #end for
        #end for
        draw.rel_line_to(step * scallop_size * params["margin"])
        corner *= Matrix.translate(Vector(1, 1) * (step * scallop_size * (nr_steps + 2 * params["margin"])))
    #end for
    (draw
        .close_path()
        .set_source_colour(bg_colour)
        .fill_preserve()
        .set_line_width(line_thickness)
        .set_source_colour(fg_colour)
        .stroke()
    )
    col += 1
    if col == nr_cols :
        row += 1
        col = 0
    #end if
#end for

image.flush().write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
