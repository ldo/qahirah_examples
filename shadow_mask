#!/usr/bin/python3
#+
# Simulation of pixelation of an image as per an old RGB CRT.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Rect, \
    Vector

#+
# Constructing the shadow masks
#
# These are made deliberately coarse, so the pixel components are easily visible.
#-

component_gap = 0.1 # relative gap between R, G, B components
primary = \
    ( # primary colour corresponding to component index 0, 1 or 2
        Colour.from_rgba((1, 0, 0)),
        Colour.from_rgba((0, 1, 0)),
        Colour.from_rgba((0, 0, 1)),
    )

def make_triangular_shadow_mask(component) :
    "constructs a mask with circular pixel components arranged in a triangle."
    scale = 3
    dimensions = Vector(3, math.sqrt(3))
    spot_radius = 0.5 * (1 - component_gap)
    spot1_pos = \
        (
            Vector(1, 0.5),
            Vector(0.5, 0.5 + 0.5 * math.sqrt(3)),
            Vector(1.5, 0.5 + 0.5 * math.sqrt(3)),
        )[component]
    spot_positions = list \
      (
        spot1_pos + offset * dimensions / 2
        for offset in (Vector(0, 0), Vector(1, 1), Vector(2, 0), Vector(-1, -1), Vector(1, -1), Vector(0, -2))
          # cover all the possible positions that contribute something to the pattern
      )
    mask = qah.ImageSurface.create \
      (
        format = CAIRO.FORMAT_RGB24,
        dimensions = round(dimensions * scale)
      )
    g = \
        (qah.Context.create(mask)
            .set_matrix(Matrix.scale(scale))
            .set_source_colour(primary[component])
            .set_operator(CAIRO.OPERATOR_SOURCE)
        )
    for pos in spot_positions :
        g.arc(pos, spot_radius, 0, qah.circle, False)
        g.fill()
    #end for
    return \
        qah.Pattern.create_for_surface(mask).set_extend(CAIRO.EXTEND_REPEAT)
#end make_triangular_shadow_mask

def make_planar_shadow_mask(component) :
    "constructs a mask with rectangular pixel components arranged horizontally."
    scale = 5
    dimensions = Vector(1, 1)
    spot = Rect \
      (
        left = component_gap / 2 + component / 3,
        top = component_gap / 2,
        width = 1 / 3 - component_gap,
        height = 1 - component_gap
      )
    mask = qah.ImageSurface.create \
      (
        format = CAIRO.FORMAT_RGB24,
        dimensions = dimensions * scale
      )
    (qah.Context.create(mask)
        .set_matrix(Matrix.scale(scale))
        .set_source_colour(primary[component])
        .set_operator(CAIRO.OPERATOR_SOURCE)
        .rectangle(spot)
        .fill()
    )
    return \
        qah.Pattern.create_for_surface(mask).set_extend(CAIRO.EXTEND_REPEAT)
#end make_planar_shadow_mask

mask_makers = \
    (
        make_triangular_shadow_mask,
        make_planar_shadow_mask,
    )

def apply_mask(image, make_mask) :
    "returns a new ImageSurface which applies the mask generated by make_mask to image.\n" \
    "\n"
    "To be strictly correct, each pixel element should have a uniform intensity, rather" \
    " than varying based on that area of the original image.\n" \
    "\n"
    "Achieving this is left as an exercise for the reader. :)\n"
    result_pix = image.create_like()
    result = \
        (qah.Context.create(result_pix)
            .set_operator(CAIRO.OPERATOR_ADD)
        )
    mask_pix = image.create_like()
    mask = qah.Context.create(mask_pix)
    for component in (0, 1, 2) :
        (mask
            .set_source(make_mask(component))
            .set_operator(CAIRO.OPERATOR_SOURCE)
            .paint()
            .set_source_surface(image, (0, 0))
            .set_operator(CAIRO.OPERATOR_MULTIPLY)
            .paint()
        )
        (result
            .set_source_surface(mask_pix, (0, 0))
            .paint()
        )
    #end for
    result_pix.flush()
    return \
        result_pix
#end apply_mask

#+
# Sample image
#-

def make_sample_image() :
    aspect = Vector(4, 3)
    res_scale = 192
    circle_radius = 1.4
    grid_unit = circle_radius / 6
    src = qah.ImageSurface.create \
      (
        format = CAIRO.FORMAT_RGB24,
        dimensions = aspect * res_scale
      )
    ctx = \
        (qah.Context.create(src)
            .set_matrix(Matrix.scale(res_scale) * Matrix.translate(aspect / 2))
            .set_source_colour(Colour.grey(.5))
            .set_operator(CAIRO.OPERATOR_SOURCE)
            .paint()
            .arc(centre = (0, 0), radius = circle_radius, angle1 = 0, angle2 = qah.circle, negative = False)
            .clip()
            .set_source_colour(Colour.grey(0))
            .paint()
            .set_source_colour(Colour.grey(1))
            .rectangle(Rect(- circle_radius, - grid_unit * 6.5, 2 * circle_radius, 3 * grid_unit))
            .fill()
            .rectangle(Rect(- circle_radius, 3 * grid_unit, 2 * circle_radius, grid_unit))
            .fill()
        )
    for i in range(6) :
        ctx.rectangle \
          (
                Rect(0, 0, grid_unit * 2, grid_unit * 2)
            +
                Vector(i * grid_unit * 2 - circle_radius, - grid_unit * 2.5)
          )
        ctx.source_colour = Colour.from_rgba \
          (
            (
                (1, 0, 0, 1, 1, 0)[i],
                (1, 1, 1, 0, 0, 0)[i],
                (0, 1, 0, 1, 0, 1)[i],
            )
          )
        ctx.fill()
        ctx.rectangle \
          (
                Rect(0, 0, grid_unit * 2, grid_unit)
            +
                Vector(i * grid_unit * 2 - circle_radius, grid_unit * 2)
          )
        ctx.source_colour = Colour.grey(i / 5)
        ctx.fill()
    #end for
    ctx.reset_clip()
    pastel_blue = Colour.from_hsva((0.58, 0.66, 0.74))
    pastel_green_dark = Colour.from_hsva((0.42, 0.66, 0.74))
    pastel_pink = Colour.from_hsva((0.91, 0.66, 0.74))
    pastel_green_light = Colour.from_hsva((0.25, 0.66, 0.74))
    pastel_purple = Colour.from_hsva((0.75, 0.66, 0.74))
    pastel_gold = Colour.from_hsva((0.08, 0.66, 0.74))
    for \
        rect, colour \
    in \
        (
            (Rect(-7, -6, 0.95, 1.95), pastel_blue),
            (Rect(-8, -6, 0.95, 5.95), pastel_green_dark),
            (Rect(-8, 0, 0.95, 5.95), pastel_pink),
            (Rect(-7, 4, 0.95, 1.95), pastel_gold),
            (Rect(6, -6, 0.95, 1.95), pastel_blue),
            (Rect(7, -6, 0.95, 5.95), pastel_green_light),
            (Rect(7, 0, 0.95, 5.95), pastel_purple),
            (Rect(6, 4, 0.95, 1.95), pastel_gold),
        ) \
    :
        (ctx.rectangle(rect * grid_unit)
            .set_source_colour(colour)
            .fill()
        )
    #end for
    src.flush()
    return \
        src
#end make_sample_image

#+
# Mainline
#-

image = make_sample_image()

result_pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = Vector(len(mask_makers), 1) * image.dimensions
  )
result = qah.Context.create(result_pix)
for i, make_mask in enumerate(mask_makers) :
    (result
        .set_source_surface(apply_mask(image, make_mask), Vector(i, 0) * image.dimensions)
        .paint()
    )
#end for
result_pix.write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
