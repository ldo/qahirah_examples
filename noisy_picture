#!/usr/bin/python3
#+
# A simulation of random noise on top of an image.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import array
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Rect, \
    Vector

class RubbishRandom :
    "a very crude random-number generator. The purpose of using this is to" \
    " ensure all runs of this sample program will produce exactly the same output."

    def __init__(self, seed) :
        self.seed = seed
    #end __init__

    def random(self) :
        "returns a random float in the range [0 .. 1)."
        # algorithm is that of the good old BSD linear-congruential pseudo-random number generator.
        self.seed = (1103515245 * self.seed + 12345) % (1 << 31)
        return \
            self.seed / (1 << 31)
    #end random

    def randrange(self, upper) :
        "returns a random integer in range(upper)."
        return \
            math.trunc(self.random() * upper)
    #end randrange

    def choice(self, seq) :
        "returns a random item from a sequence."
        return \
            seq[self.randrange(len(seq))]
    #end choice

#end RubbishRandom

#+
# Sample image & noise
#-

def make_sample_image() :
    aspect = Vector(4, 3)
    res_scale = 192
    circle_radius = 1.4
    grid_unit = circle_radius / 6
    src = qah.ImageSurface.create \
      (
        format = CAIRO.FORMAT_RGB24,
        dimensions = aspect * res_scale
      )
    ctx = \
        (qah.Context.create(src)
            .set_matrix(Matrix.scale(res_scale) * Matrix.translate(aspect / 2))
            .set_source_colour(Colour.grey(.5))
            .set_operator(CAIRO.OPERATOR_SOURCE)
            .paint()
            .circle(centre = (0, 0), radius = circle_radius)
            .clip()
            .set_source_colour(Colour.grey(0))
            .paint()
            .set_source_colour(Colour.grey(1))
            .rectangle(Rect(- circle_radius, - grid_unit * 6.5, 2 * circle_radius, 3 * grid_unit))
            .fill()
            .rectangle(Rect(- circle_radius, 3 * grid_unit, 2 * circle_radius, grid_unit))
            .fill()
        )
    for i in range(6) :
        ctx.rectangle \
          (
                Rect(0, 0, grid_unit * 2, grid_unit * 2)
            +
                Vector(i * grid_unit * 2 - circle_radius, - grid_unit * 2.5)
          )
        ctx.source_colour = Colour.from_rgba \
          (
            (
                (1, 0, 0, 1, 1, 0)[i],
                (1, 1, 1, 0, 0, 0)[i],
                (0, 1, 0, 1, 0, 1)[i],
            )
          )
        ctx.fill()
        ctx.rectangle \
          (
                Rect(0, 0, grid_unit * 2, grid_unit)
            +
                Vector(i * grid_unit * 2 - circle_radius, grid_unit * 2)
          )
        ctx.source_colour = Colour.grey(i / 5)
        ctx.fill()
    #end for
    ctx.reset_clip()
    pastel_blue = Colour.from_hsva((0.58, 0.66, 0.74))
    pastel_green_dark = Colour.from_hsva((0.42, 0.66, 0.74))
    pastel_pink = Colour.from_hsva((0.91, 0.66, 0.74))
    pastel_green_light = Colour.from_hsva((0.25, 0.66, 0.74))
    pastel_purple = Colour.from_hsva((0.75, 0.66, 0.74))
    pastel_gold = Colour.from_hsva((0.08, 0.66, 0.74))
    for \
        rect, colour \
    in \
        (
            (Rect(-7, -6, 0.95, 1.95), pastel_blue),
            (Rect(-8, -6, 0.95, 5.95), pastel_green_dark),
            (Rect(-8, 0, 0.95, 5.95), pastel_pink),
            (Rect(-7, 4, 0.95, 1.95), pastel_gold),
            (Rect(6, -6, 0.95, 1.95), pastel_blue),
            (Rect(7, -6, 0.95, 5.95), pastel_green_light),
            (Rect(7, 0, 0.95, 5.95), pastel_purple),
            (Rect(6, 4, 0.95, 1.95), pastel_gold),
        ) \
    :
        (ctx.rectangle(rect * grid_unit)
            .set_source_colour(colour)
            .fill()
        )
    #end for
    src.flush()
    return \
        src
#end make_sample_image

def make_noise_pat() :
    random = RubbishRandom(999) # want same sequence every time

    def noise_byte() :
        return \
            random.randrange(256)
    #end noise_byte

#begin make_noise_pat
    pat_size = 256
    patbytes = array.array("I", (0,) * (pat_size * pat_size))
      # compute by longwords rather than bytes, so result is endian-independent
    assert patbytes.itemsize == 4 # in case of any doubt--docs seem a little unclear on this point
    for i in range(len(patbytes)) :
        a = 255 # ignored
        r = noise_byte()
        g = noise_byte()
        b = noise_byte()
        patbytes[i] = a << 24 | r << 16 | g << 8 | b
    #end for
    return \
        (qah.Pattern.create_for_surface
          (
            qah.ImageSurface.create_for_array
              (
                arr = patbytes,
                format = CAIRO.FORMAT_RGB24,
                dimensions = (pat_size, pat_size),
                stride = 4 * pat_size
              )
          )
          .set_extend(CAIRO.EXTEND_REPEAT)
          #.set_filter(CAIRO.FILTER_NEAREST) # try this if you like
          .set_matrix(Matrix.scale(0.5)) # make the noise coarser
        )
#end make_noise_pat

#+
# Mainline
#-

dst = make_sample_image()
noise_strength = 0.5
  # feel free to play with this
  # useful values range from 0 - no noise, to 1 - pure noise, image disappears
noise_pat = make_noise_pat() # why does it segfault if I substitute call directly below?
mask = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_A8,
    dimensions = dst.dimensions
  )
(qah.Context.create(mask)
    .set_source_colour(Colour.grey(1, noise_strength))
    .set_operator(CAIRO.OPERATOR_SOURCE)
    .paint()
)
(qah.Context.create(dst)
    .set_source(noise_pat)
    .mask_surface(mask, (0, 0))
)
dst \
    .flush() \
    .write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
