#!/usr/bin/python3
#+
# Demo of Cairo operators.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Rect, \
    Vector

operator_names = \
    ( # differ only in case from CAIRO.OPERATOR_xxx names
        "clear",
        "source",
        "over",
        "in",
        "out",
        "atop",
        "dest",
        "dest_over",
        "dest_in",
        "dest_out",
        "dest_atop",
        "xor",
        "add",
        "saturate",
        "multiply",
        "screen",
        "overlay",
        "darken",
        "lighten",
        "colour_dodge",
        "colour_burn",
        "hard_light",
        "soft_light",
        "difference",
        "exclusion",
        "HSL_hue",
        "HSL_saturation",
        "HSL_colour",
        "HSL_luminosity",
    )
unbounded = \
    {
        CAIRO.OPERATOR_IN,
        CAIRO.OPERATOR_OUT,
        CAIRO.OPERATOR_DEST_IN,
        CAIRO.OPERATOR_DEST_ATOP,
    }

def complement(colour) :
    "returns the complement of a Colour."
    return \
        colour.combine \
          (
            other = Colour.grey(1), # ignored
            rgb_func = lambda ac, aa, bc, ba : 1 - ac,
            alpha_func = lambda aa, ba : aa
          )
#end complement

#+
# Mainline
#-

nr_cols = math.ceil(math.sqrt(len(operator_names)))
nr_rows = math.ceil(len(operator_names) / nr_cols)

major_dim = 150
minor_dim = 100
rect_1_colour = Colour.from_rgba((0.7, 0, 0, 0.8))
rect_2_colour = Colour.from_rgba((0, 0, 0.9, 0.4))

rect_1_pattern = \
    qah.Pattern.create_linear \
      (
        p0 = (0, 0),
        p1 = (major_dim, 0),
        colour_stops =
            (
                (0, rect_1_colour),
                (1, complement(rect_1_colour)),
            )
      )
rect_2_pattern = \
    qah.Pattern.create_linear \
      (
        p0 = (0, 0),
        p1 = (0, major_dim),
        colour_stops =
            (
                (0, rect_2_colour),
                (1, complement(rect_2_colour)),
            )
      )
margin = Vector(10, 10)
top_extra = 40
font_size = 24
g = qah.Context.create_for_dummy()
g.select_font_face("sans-serif", CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_BOLD)
g.set_font_size(font_size)
use_font = g.scaled_font
text_height = g.font_extents.height
draw_bounds = Rect.from_dimensions(Vector(major_dim, major_dim) + 2 * margin + Vector(0, round(text_height)))
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_ARGB32,
    dimensions = Vector(nr_cols, nr_rows) * draw_bounds.dimensions + margin + Vector(0, top_extra)
  )
g = qah.Context.create(pix)
g.operator = CAIRO.OPERATOR_SOURCE
g.source_colour = Colour.grey(0, 0)
text_colour = Colour.grey(0, 1)
g.paint()
g.scaled_font = use_font
title = "Cairo Drawing Operators"
text_extents = g.text_extents(title)
g.move_to \
  ((
    (pix.width - text_extents.width) / 2,
    text_extents.height + text_extents.y_bearing + top_extra / 2
  ))
g.source_colour = text_colour
g.show_text(title)
row = 0
col = 0
g.line_width = 2
for op_name in operator_names :
    dest_rect = \
        (
            draw_bounds
        +
            Vector(col, row) * draw_bounds.dimensions
        +
            Vector(0, top_extra)
        )
    g.matrix = draw_bounds.transform_to(dest_rect)
    g.reset_clip()
    g.operator = CAIRO.OPERATOR_OVER
    g.rectangle(Rect.from_dimensions(Vector(major_dim, minor_dim)) + margin)
    g.source = rect_1_pattern
    g.fill()
    g.operator = getattr(CAIRO, "OPERATOR_" + op_name.upper())
    op_unbounded = g.operator in unbounded
    if op_unbounded :
        g.new_path()
        g.rectangle(draw_bounds)
        g.clip() # to prevent figure from wiping out others
    #end if
    g.rectangle(Rect.from_dimensions(Vector(minor_dim, major_dim)) + Vector(major_dim - minor_dim, 0) + margin)
    g.source = rect_2_pattern
    g.fill()
    g.scaled_font = use_font
    text_extents = g.text_extents(op_name)
    max_text_width = draw_bounds.width * 0.9
    if text_extents.width > max_text_width :
        hor_size = font_size * max_text_width / text_extents.width
        text_extents.width = max_text_width
    else :
        hor_size = font_size
    #end if
    g.font_matrix = qah.Matrix.scale((hor_size, font_size))
    g.move_to \
      ((
        draw_bounds.middle.x - text_extents.width / 2,
        major_dim + text_extents.y_bearing + text_height * 2
      ))
    g.operator = CAIRO.OPERATOR_SOURCE
    g.source_colour = text_colour
    g.show_text(op_name)
    if op_unbounded :
        g.rectangle(draw_bounds.inset((2, 2)))
        g.stroke()
    #end if
    col += 1
    if col == nr_cols :
        row += 1
        col = 0
    #end if
#end for
pix.flush()
pix.write_to_png("%s.png" % os.path.basename(sys.argv[0]))
