#!/usr/bin/python3
#+
# Black-and-white patterns from the original Apple Mac,
# rendered in their original appearance and also with
# colour patterns applied.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import array
import colorsys
import qahirah as qah
CAIRO = qah.CAIRO
deg = qah.deg
Vec = qah.Vector
Matrix = qah.Matrix
Rect = qah.Rect

#+
# The 38 classic B&W Mac system patterns from the PAT# 0 resource
#-

bwpats = \
    (
        b"........" # 100% black
        b"........"
        b"........"
        b"........"
        b"........"
        b"........"
        b"........"
        b"........",

        b".. ... ." # very dark grey
        b"........"
        b" ... ..."
        b"........"
        b".. ... ."
        b"........"
        b" ... ..."
        b"........",

        b".. ... ." # dark grey
        b" ... ..."
        b".. ... ."
        b" ... ..."
        b".. ... ."
        b" ... ..."
        b".. ... ."
        b" ... ...",

        b". . . . " # 50% grey
        b" . . . ."
        b". . . . "
        b" . . . ."
        b". . . . "
        b" . . . ."
        b". . . . "
        b" . . . .",

        b" . . . ."
        b"........"
        b" . . . ."
        b"........"
        b" . . . ."
        b"........"
        b" . . . ."
        b"........",

        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . ",

        b"... ... "
        b".. ... ."
        b". ... .."
        b" ... ..."
        b"... ... "
        b".. ... ."
        b". ... .."
        b" ... ...",

        b".   .   "
        b".   .   "
        b".   .   "
        b".   .   "
        b".   .   "
        b".   .   "
        b".   .   "
        b".   .   ",

        b". ..   ."
        b"  ..    "
        b"      .."
        b"   .. .."
        b".. ..   "
        b"..      "
        b"    ..  "
        b".   .. .",

        b".       "
        b"   .    "
        b"      . "
        b"  .     "
        b"       ."
        b"    .   "
        b" .      "
        b"     .  ",

        b"........"
        b".   .   "
        b".   .   "
        b".   .   "
        b"........"
        b".   .   "
        b".   .   "
        b".   .   ",

        b"........" # bricks
        b".       "
        b".       "
        b".       "
        b"........"
        b"    .   "
        b"    .   "
        b"    .   ",

        b".       "
        b"        "
        b"        "
        b"        "
        b"        "
        b"        "
        b"        "
        b"        ",

        b".       " # hatching
        b" .      "
        b"  .     "
        b"   .    "
        b"       ."
        b"      . "
        b"     .  "
        b"    .   ",

        b".     . "
        b" .   .  "
        b"  ...  ."
        b" .   .  "
        b".     . "
        b"       ."
        b"       ."
        b"       .",

        b".....   " # basket weave
        b" ... .  "
        b"  .   . "
        b" .   ..."
        b".   ...."
        b"   . ..."
        b"  .   . "
        b" ...   .",

        b" . . . ."
        b". .     "
        b" .      "
        b" .      "
        b" . . . ."
        b"    . . "
        b"     .  "
        b"     .  ",

        b"  .     "
        b" . .    "
        b".   .   "
        b".   .   "
        b".   .   "
        b".   .   "
        b"     . ."
        b"      . ",

        b". ......" # tiles
        b"        "
        b". ......"
        b". ......"
        b". ..    "
        b". ..    "
        b". ..    "
        b". ..    ",

        b"        " # 100% white
        b"        "
        b"        "
        b"        "
        b"        "
        b"        "
        b"        "
        b"        ",

        b".       "
        b"        "
        b"    .   "
        b"        "
        b".       "
        b"        "
        b"    .   "
        b"        ",

        b".   .   "
        b"        "
        b"  .   . "
        b"        "
        b".   .   "
        b"        "
        b"  .   . "
        b"        ",

        b".   .   "
        b"  .   . "
        b".   .   "
        b"  .   . "
        b".   .   "
        b"  .   . "
        b".   .   "
        b"  .   . ",

        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . "
        b". . . . ",

        b"........"
        b"        "
        b"........"
        b"        "
        b"........"
        b"        "
        b"........"
        b"        ",

        b"   .   ."
        b"  .   . "
        b" .   .  "
        b".   .   "
        b"   .   ."
        b"  .   . "
        b" .   .  "
        b".   .   ",

        b"........"
        b"        "
        b"        "
        b"        "
        b"........"
        b"        "
        b"        "
        b"        ",

        b"       ."
        b"      . "
        b"     .  "
        b"    .   "
        b"   .    "
        b"  .     "
        b" .      "
        b".       ",

        b". . . . "
        b"        "
        b".       "
        b"        "
        b".   .   "
        b"        "
        b".       "
        b"        ",

        b"........"
        b".       "
        b".       "
        b".       "
        b".       "
        b".       "
        b".       "
        b".       ",

        b"    .   " # diagonal bricks
        b"   ...  "
        b"  .   . "
        b"..     ."
        b".       "
        b"       ."
        b"      . "
        b"     .  ",

        b".   .   " # like paisley
        b"   . .  "
        b"  .   . "
        b" .     ."
        b".   .   "
        b"        "
        b". . . . "
        b"        ",

        b" .      "
        b". .     "
        b"        "
        b"        "
        b"     .  "
        b"    . . "
        b"        "
        b"        ",

        b"      .."
        b".    .  "
        b" .  .   "
        b"  ..    "
        b"    ..  "
        b"      . "
        b"       ."
        b"       .",

        b".       " # fish scales
        b".       "
        b" .     ."
        b"  ..... "
        b"    .   "
        b"    .   "
        b"   . .  "
        b"...   ..",

        b"   .    "
        b"  .     "
        b" . . .  "
        b". . . . "
        b"........"
        b"      . "
        b"     .  "
        b"    .   ",

        b" ... ..."
        b".   .  ."
        b".   ...."
        b".   ...."
        b" ... ..."
        b".  ..   "
        b".....   "
        b".....   ",

        b"        "
        b"    .   "
        b"   . .  "
        b"  . . . "
        b" . . . ."
        b"  . . . "
        b"   . .  "
        b"    .   ",
)

def get_pat(index) :
    return \
        (
            qah.Pattern.create_for_surface \
              (
                qah.ImageSurface.create_for_array
                  (
                    arr = array.array("B", ((0, 255)[b > ord(" ")] for b in bwpats[index])),
                    format = CAIRO.FORMAT_A8,
                    dimensions = (8, 8),
                    stride = 8
                  )
              )
            .set_filter(CAIRO.FILTER_NEAREST) # for that gritty, pixelated look
            .set_extend(CAIRO.EXTEND_REPEAT)
        )
#end get_pat

#+
# Mainline
#-

nr_rows = 4

saturation = 0.5
intensity = 0.75
pat1 = \
    (qah.Pattern.create_linear(Vec(0, 0), Vec(0, 1))
        .add_color_stop_rgb(*((0,) + colorsys.hsv_to_rgb(.15, saturation, intensity)))
        .add_color_stop_rgb(*((1,) + colorsys.hsv_to_rgb(.65, saturation, intensity)))
    )
  # example of gradient pattern definition using method chaining
pat2 = qah.Pattern.create_linear \
  (
    p0 = (0, 0),
    p1 = (1, 0),
    color_stops =
        (
            (0,) + colorsys.hsv_to_rgb(.41, saturation, intensity),
            (1,) + colorsys.hsv_to_rgb(.91, saturation, intensity),
        )
  )
  # example of gradient pattern definition by including colour stops in create call

margins = Vec(16, 16)
cell_size = Vec(64, 64)
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_ARGB32,
    dimensions = (cell_size + margins) * Vec(len(bwpats), nr_rows) + margins
  )
g = qah.Context(pix)
g.operator = CAIRO.OPERATOR_SOURCE
g.set_source_rgba(0, 0, 0, 0)
g.paint()
col = 0
for i in range(len(bwpats)) :
    pat = get_pat(i)
    pat.matrix = Rect(0, 0, 2, 2).transform_to(Rect(0, 0, 1, 1))
    cell = Rect.from_dimensions(cell_size) + Vec(col, 0) * (cell_size + margins) + margins
    g.new_path()
    g.rectangle(cell)
    g.operator = CAIRO.OPERATOR_SOURCE
    g.set_source_rgba(1, 1, 1, 1)
    g.fill()
    g.new_path()
    g.source = pat
    g.rectangle(cell)
    g.operator = CAIRO.OPERATOR_OVER
    g.fill()
    g.operator = CAIRO.OPERATOR_SOURCE
    for flip in (False, True) :
        cell += Vec(0, 1) * (cell_size + margins)
        pat_matrix = cell.transform_to(Rect(0, 0, 1, 1))
        pat1.matrix = pat_matrix
        pat2.matrix = pat_matrix
        g.rectangle(cell)
        g.source = pat1
        g.fill()
        g.source = pat2
        g.rectangle(cell)
        g.clip()
        g.mask(pat)
        g.reset_clip()
        pat1, pat2 = pat2, pat1
    #end for
    cell += Vec(0, 1) * (cell_size + margins)
    g.new_path()
    g.rectangle(cell)
    g.operator = CAIRO.OPERATOR_SOURCE
    g.set_source_rgba(1, 1, 1, 1)
    g.fill()
    g.new_path()
    pat.matrix *= Matrix.rotation(45 / deg, center = (4, 4))
    pat.filter = CAIRO.FILTER_BEST
    g.source = pat
    g.rectangle(cell)
    g.operator = CAIRO.OPERATOR_OVER
    g.fill()
    col += 1
#end for
pix \
    .flush() \
    .write_to_png("%s.png" % os.path.basename(sys.argv[0]))
