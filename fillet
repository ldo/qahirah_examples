#!/usr/bin/python3
#+
# Filleting a corner between two lines: that is to say, rounding off
# the corner with a circular arc of a given radius.
#
# Copyright 2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Vector

#+
# Useful stuff
#-

def make_fillet_path(p0, p1, p2, r) :
    "given Vectors p0, p1, p2 and Real radius r, creates a Path consisting of" \
    " two connected straight lines (p0, p1) and (p1, p2), but with the corner" \
    " at p1 rounded off into a fillet of radius r."
    dirn1 = (p0 - p1).angle()
    dirn2 = (p2 - p1).angle()
    mid_dirn = (dirn1 + dirn2) / 2
    flip = abs(dirn2 - dirn1) > math.pi
    clockwise = (dirn2 > dirn1) == flip
    if flip :
        # want mid_dirn to bisect the smaller angle between dirn1 and dirn2
        if mid_dirn > 0 :
            mid_dirn -= math.pi
        else :
            mid_dirn += math.pi
        #end if
    #end if
    inset = abs(r / math.tan((dirn2 - dirn1) / 2))
      # from corner to where fillet circle is tangent to lines
    if inset > abs(p1 - p0) or inset > abs(p1 - p2) :
        raise ValueError("lines are too short for fillet")
    #end if
    t1 = p1 + Vector.unit((p0 - p1).angle()) * inset # fillet tangent point on line (p0, p1)
    t2 = p1 + Vector.unit((p2 - p1).angle()) * inset # fillet tangent point on line (p2, p1)
    fillet_centre = \
        (
            p1
        +
            r / abs(math.sin(mid_dirn - dirn1)) * Vector.unit(mid_dirn)
        )
      # position of centre of fillet circle
    g = qah.Context.create_for_dummy()
    g.move_to(p0)
    g.line_to(t1)
    g.arc \
      (
        centre = fillet_centre,
        radius = r,
        angle1 = (t1 - fillet_centre).angle(),
        angle2 = (t2 - fillet_centre).angle(),
        negative = not clockwise
      )
    g.line_to(t2)
    g.line_to(p2)
    return \
        g.copy_path()
#end make_fillet_path

#+
# Mainline
#-

examples = \
    ( # (p0, p1, p2, r)
        (Vector(5, 5), Vector(95, 50), Vector(5, 95), 10),
        (Vector(5, 5), Vector(95, 50), Vector(5, 95), 20),
        (Vector(5, 5), Vector(95, 50), Vector(5, 95), 30),
        (Vector(5, 5), Vector(95, 50), Vector(5, 95), 40),
    )
example_dimensions = Vector(70, 100) # sufficient for above examples

margin = Vector(10, 10)
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = Vector(len(examples), 1) * (example_dimensions + margin) + margin
  )
ctx = \
    (qah.Context.create(pix)
        .set_source_colour(Colour.grey(1))
        .paint()
        .set_source_colour(Colour.grey(0))
        .set_line_width(12)
    )
for idx, (p0, p1, p2, r) in enumerate(examples) :
    origin = margin + Vector(idx, 0) * (example_dimensions + margin)
    (ctx
        .new_path()
        .append_path(make_fillet_path(p0, p1, p2, r).transform(Matrix.translate(origin)))
        .stroke()
    )
#end for

pix.flush().write_to_png("%s.png" % os.path.basename(sys.argv[0]))
